======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Yuki Wu

Processing week 2

Your current Git repo size is about 1.86 MiB on disk

Found directories: .git, week1, week2, Feedback
Found files: .gitkeep, .gitignore, README.md, texput.log

Processing week 2: week2

Found 20 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: MyExampleScript.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: MyExampleScript.py
# Description: An example script
# Usage: python MyExampleScript.py
# Date: Oct 2025

def foo(x):
    x *= x # same as x = x*x
    print(x)

foo(2)
**********

Output (first 500 chars):

**********
4

**********
No errors.
======================================================================
Script: lc2.py

Contents:

**********
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
heavy_rain = [(month, rain) for month, rain in rainfall if rain > 100]
print("Months and rainfall values when the amount of rain was greater than 100mm:")
print(heavy_rain)
 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 
light_rain = [month for month, rain in rainfall if rain < 50]
print("Months when the amount of rain was less than 50mm:")
print(light_rain)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 
heavy_rain_loop = []
for month, rain in rainfall:
    if rain > 100:
        heavy_rain_loop.append((month, rain))


print("Months and rainfall values when the amount of rain was greater than 100mm:")
print(heavy_rain_loop)

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********

Output (first 500 chars):

**********
Months and rainfall values when the amount of rain was greater than 100mm:
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months when the amount of rain was less than 50mm:
['MAR', 'SEP']
Months and rainfall values when the amount of rain was greater than 100mm:
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]

**********
No errors.
======================================================================
Script: cfexcercises1.py

Contents:

**********
#!/usr/bin/env python3

# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: cfexercises1.py
# Description: Functions with multiple arguments and return values (module version)
# Usage: python cfexercises1.py
# Date: Oct 2025

"""Functions with multiple arguments and return values"""
__author__ = 'Xiaoqi Wu (xiaoqi.wu22@imperial.ac.uk)'
__version__ = '0.0.2'

import sys


def foo_1(x=4):
    """Return the square root of x"""
    return x ** 0.5


def foo_2(x=5, y=8):
    """Return the larger of x and y"""
    if x > y:
        return x
    return y


def foo_3(x=5, y=2, z=8):
    """Return the three numbers in ascending order as a list"""
    if x > y:
        x, y = y, x
    if x > z:
        x, z = z, x
    if y > z:
        y, z = z, y
    return [x, y, z]


def foo_4(x=5):
    """Calculate the factorial of x using a for loop"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result


def foo_5(x=5):
    """A recursive function that calculates the factorial of x"""
    if x == 1:
        return 1
    return x * foo_5(x - 1)


def foo_6(x=5):
    """Calculate the factorial of x using a while loop"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto


def main(argv):
    """Main entry point: test all foo functions with example arguments"""
    print("Testing foo_1:", foo_1(9))
    print("Testing foo_2:", foo_2(10, 20))
    print("Testing foo_3:", foo_3(10, 5, 7))
    print("Testing foo_4:", foo_4(5))
    print("Testing foo_5:", foo_5(5))
    print("Testing foo_6:", foo_6(5))
    return 0


if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)

**********

Output (first 500 chars):

**********
Testing foo_1: 3.0
Testing foo_2: 20
Testing foo_3: [5, 7, 10]
Testing foo_4: 120
Testing foo_5: 120
Testing foo_6: 120

**********
No errors.
======================================================================
Script: oaks.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: oaks.py
# Description: Find oak trees from a list of species
# Usage: python oaks.py
# Date: Oct 2025

## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)

print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********

Output (first 500 chars):

**********
{'Quercus petraea', 'Quercus cerris', 'Quercus robur'}
{'Quercus petraea', 'Quercus cerris', 'Quercus robur'}
{'QUERCUS PETRAEA', 'QUERCUS CERRIS', 'QUERCUS ROBUR'}
{'QUERCUS PETRAEA', 'QUERCUS CERRIS', 'QUERCUS ROBUR'}

**********
No errors.
======================================================================
Script: dictionary.py

Contents:

**********
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. 
# OR, 
# 'Chiroptera': {'Myotis  lucifugus'} ... etc

taxa_dic = {}

for species, order in taxa:
        if order not in taxa_dic:
                taxa_dic[order] = set()
        taxa_dic[order].add(species)


print(taxa_dic)


# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
taxa_dic = {order: {species for species, o in taxa if o == order} for species, order in taxa}
print(taxa_dic)


# Note that the above is not the most efficient way to do this, as it loops through taxa multiple times.
# A more efficient way is to first get the unique orders, then loop through taxa once for each order
orders = {order for species, order in taxa}
taxa_dic = {order: {species for species, o in taxa if o == order} for order in orders}
print(taxa_dic)
# This is more efficient as it only loops through taxa once for each unique order.
# However, the first method is more concise and easier to read.

**********

Output (first 500 chars):

**********
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Mus domesticus', 'Cleithrionomys rutilus', 'Gerbillus henleyi', 'Peromyscus crinitus'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Arctocephalus gazella', 'Canis lupus', 'Lyacon pictus'}}
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Mus domesticus', 'Cleithrionomys rutilus', 'Gerbillus henleyi', 'Peromyscus crinitus'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Arctocephalus
**********
No errors.
======================================================================
Script: cfexercises2.py

Contents:

**********
#!/usr/bin/env python3

# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: cfexcercises2.py
# Description: Functions with multiple arguments and return values
# Usage: python cfexcercises2.py
# Date: Oct 2025

########################
def hello_1(x):
    for j in range(x):
        if j % 3 == 0: # if j is divisible by 3
            print('hello')
    print(' ')

hello_1(12)

########################
def hello_2(x): 
    for j in range(x):
        if j % 5 == 3: # if the remainder when j is divided by 5 is 3
            print('hello')
        elif j % 4 == 3: # if the remainder when j is divided by 4 is 3
            print('hello')
    print(' ')

hello_2(12)

########################
def hello_3(x, y): # print 'hello' for every number from x to y-1
    for i in range(x, y):
        print('hello')
    print(' ')

hello_3(3, 17)

########################
def hello_4(x):
    while x != 15: # while x is not equal to 15
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)

########################
def hello_5(x):
    while x < 100:
        if x == 31: # if x is equal to 31
            for k in range(7): # print 'hello' 7 times
                print('hello')
        elif x == 18: # if x is equal to 18
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

# WHILE loop with BREAK
def hello_6(x, y):
    while x: # while x is True # this is an infinite loop unless we break out of it
        print("hello! " + str(y)) # print hello and the value of y
        y += 1 # increment y by 1 
        if y == 6:
            break
    print(' ')

hello_6 (True, 0)
**********

Output (first 500 chars):

**********
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello! 0
hello! 1
hello! 2
hello! 3
hello! 4
hello! 5
 

**********
No errors.
======================================================================
Script: using_name.py

Contents:

**********
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is being run by itself!')
else:
    print('I am being imported from another script/program/module!')

print("This module's name is: " + __name__)
**********

Output (first 500 chars):

**********
This program is being run by itself!
This module's name is: __main__

**********
No errors.
======================================================================
Script: basic_io3.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: basic_io3.py
# Description: Basic file storing objects in Python
# Usage: python basic_io3.py
# Date: Oct 2025


#############################
# STORING OBJECTS
#############################
# to store more complex objects such as lists or dictionaries, we can use the pickle module
my_dictionary = {"a key": 10, "another key": 11} 

import pickle #built-in pickle module, which can convert Python objects into a binary format

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f) #saves the dictionary’s structure and content in binary form
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f) #“Unpickles” (deserialises) the binary data and restores it as a normal Python dictionary called another_dictionary.
f.close()

print(another_dictionary)

**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/YukiWu_yw6022/week2/code/basic_io3.py", line 16, in <module>
    f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testp.p'

**********
======================================================================
Script: scope.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: scope.py
# Description: Demonstrate variable scope in Python
# Usage: python scope.py
# Date: Oct 2025

_a_global = 10 # a global variable

if _a_global >= 5:
    _b_global = _a_global + 5 # also a global variable


print("Before calling a_function, outside the function, the value of _a_global is", _a_global)
print("Before calling a_function, outside the function, the value of _b_global is", _b_global)

def a_function():
    _a_global = 4 # a local variable
    
    if _a_global >= 4:
        _b_global = _a_global + 5 # also a local variable
    
    _a_local = 3
    
    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value of _b_global is", _b_global)
    print("Inside the function, the value of _a_local is", _a_local)


a_function()


print("After calling a_function, outside the function, the value of _a_global is (still)", _a_global)
print("After calling a_function, outside the function, the value of _b_global is (still)", _b_global)
print("After calling a_function, outside the function, the value of _a_local is ", _a_local)








def a_function():
    _a_global = 10
    def _a_function2():
        global _a_global
        _a_global = 20
    print("Before calling a_function2, value of _a_global is", _a_global)
    _a_function2()
    print("After calling a_function2, value of _a_global is", _a_global)

a_function()

print("The value of _a_global in main workspace / namespace now is", _a_global)



_a_global = 10

def a_function():
    def _a_function2():
        global _a_global
        _a_global = 20
    print("Before calling a_function2, value of _a_global is", _a_global)
    _a_function2()
    print("After calling a_function2, value of _a_global is", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is", _a_global)

**********

Output (first 500 chars):

**********
Before calling a_function, outside the function, the value of _a_global is 10
Before calling a_function, outside the function, the value of _b_global is 15
Inside the function, the value of _a_global is 4
Inside the function, the value of _b_global is 9
Inside the function, the value of _a_local is 3
After calling a_function, outside the function, the value of _a_global is (still) 10
After calling a_function, outside the function, the value of _b_global is (still) 15

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/YukiWu_yw6022/week2/code/scope.py", line 34, in <module>
    print("After calling a_function, outside the function, the value of _a_local is ", _a_local)
                                                                                       ^^^^^^^^
NameError: name '_a_local' is not defined. Did you mean: '_a_global'?

**********
======================================================================
Script: basic_io1.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: basic_io1.py
# Description: Basic file input in Python
# Usage: python basic_io1.py
# Date: Oct 2025


#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r') # 'r' means read
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)


# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)


f.close()



#############################
# FILE INPUT
#############################
# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in f:
        print(line)

# Once you drop out of the with, the file is automatically closed

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)

**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/YukiWu_yw6022/week2/code/basic_io1.py", line 12, in <module>
    f = open('../sandbox/test.txt', 'r') # 'r' means read
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

**********
======================================================================
Script: boilerplate.py

Contents:

**********
#!/usr/bin/env python3
__appname__ = 'boilerplate.py'
__author__ = 'Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk'
__version__ = '0.0.1'
__license__ = "MIT license"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)



def main(argv):
    print("This is a boilerplate")

sys.exit(status)
**********

Output (first 500 chars):

**********
This is a boilerplate

**********
No errors.
======================================================================
Script: basic_io2.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: basic_io2.py
# Description: Save a list to a file
# Usage: python basic_io2.py
# Date: Oct 2025

#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end


f.close()
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/YukiWu_yw6022/week2/code/basic_io2.py", line 13, in <module>
    f = open('../sandbox/testout.txt','w')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testout.txt'

**********
======================================================================
Script: control_flow.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: control_flow.py
# Description: Some functions exemplifying the use of control statements
# Usage: python control_flow.py
# Date: Oct 2025


#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return f"No divisor found for {x}!" # Each function can return a value or a variable.
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor") 
            return False
    print(f"{x} is a prime!")
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
    
**********

Output (first 500 chars):

**********
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is
**********
No errors.
======================================================================
Script: lc1.py

Contents:

**********
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

latin_names = [bird[0] for bird in birds]
common_names = [bird[1] for bird in birds]
mean_body_masses = [bird[2] for bird in birds]
print("Latin names:")
print(latin_names)
print("Common names:")
print(common_names)
print("Mean body masses:")
print(mean_body_masses)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

latin_names_loop = []
for bird in birds:
    latin_names_loop.append(bird[0])


common_names_loop = []
for bird in birds:
    common_names_loop.append(bird[1])


mean_body_masses_loop = []
for bird in birds:
    mean_body_masses_loop.append(bird[2])


print("Latin names:")
print(latin_names_loop)
print("Common names:")
print(common_names_loop)
print("Mean body masses:")
print(mean_body_masses_loop)

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.

**********

Output (first 500 chars):

**********
Latin names:
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names:
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
Mean body masses:
[18.7, 19, 19.5, 19.6, 20.2]
Latin names:
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names:
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree s
**********
No errors.
======================================================================
Script: sysargv.py

Contents:

**********
#!/usr/bin/env python3

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))

**********

Output (first 500 chars):

**********
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********
No errors.
======================================================================
Script: oaks_debugme.py

Contents:

**********
#!/usr/bin/env python3

# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: oaks_debugme.py
# Description: Identify oak species from CSV and save them to a new file
# Usage: python3 oaks_debugme.py
# Date: Oct 2025

import csv # module for reading and writing CSV files
import sys # module for system-specific parameters and functions

def is_an_oak(name): # check if a species is an oak
    """ 
    Returns True if the genus starts with 'quercus' (case-insensitive).
    Handles minor typos like an extra 's'.

    >>> is_an_oak('Quercus robur')
    True
    >>> is_an_oak('quercus petraea')
    True
    >>> is_an_oak('Quercuss cerris')
    True
    >>> is_an_oak('Fagus sylvatica')
    False
    >>> is_an_oak('Pinus sylvestris')
    False
    >>> is_an_oak('Querc')
    False
    """
    name = name.strip().lower() # clean up the input
    return name.startswith('quercus') # check if it starts with 'quercus'


def main(argv): # main function
    input_file = '../data/TestOaksData.csv'
    output_file = '../data/JustOaksData.csv'

    # Open input and output using context managers (auto-close)
    with open(input_file, 'r') as f, open(output_file, 'w', newline='') as g: # ensure newline='' for CSV writing
        taxa = csv.reader(f)
        csvwrite = csv.writer(g)

        for row in taxa:
            if not row:  # skip empty rows
                continue
            print(row)
            print("The genus is:")
            print(row[0] + '\n')
            if is_an_oak(row[0]):
                print('FOUND AN OAK!\n')
                csvwrite.writerow([row[0], row[1]])

    print(f"Finished! Oaks saved to '{output_file}'")
    return 0


if __name__ == "__main__": # only run this if script is executed, not imported  
    import doctest
    doctest.testmod()
    status = main(sys.argv)

**********

Output (first 500 chars):

**********
['Genus', ' species']
The genus is:
Genus

['Quercus', ' robur']
The genus is:
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is:
Fraxinus

['Pinus', ' sylvestris']
The genus is:
Pinus

['Quercus', ' cerris']
The genus is:
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is:
Quercus

FOUND AN OAK!

Finished! Oaks saved to '../data/JustOaksData.csv'

**********
No errors.
======================================================================
Script: tuple.py

Contents:

**********
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 

for bird in birds:
    print("Latin name:", bird[0], "Common name:", bird[1], "Mass:", bird[2])


# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.







**********

Output (first 500 chars):

**********
Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
Latin name: Delichon urbica Common name: House martin Mass: 19
Latin name: Junco phaeonotus Common name: Yellow-eyed junco Mass: 19.5
Latin name: Junco hyemalis Common name: Dark-eyed junco Mass: 19.6
Latin name: Tachycineata bicolor Common name: Tree swallow Mass: 20.2

**********
No errors.
======================================================================
Script: loops.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: loops.py
# Description: for and while loops
# Usage: python loops.py
# Date: Oct 2025

# FOR loops
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loop
z = 0
while z < 100:
    z = z + 1
    print(z)
**********

Output (first 500 chars):

**********
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********
No errors.
======================================================================
Script: basic_csv.py

Contents:

**********
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: basic_csv.py
# Description: Basic CSV file input and output in Python
# Usage: python basic_csv.py
# Date: Oct 2025


import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:
    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:
        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])

**********

Output (first 500 chars):

**********

**********
No errors.
======================================================================
Script: align_seqs.py

Contents:

**********
#!/usr/bin/env python3

# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: align_seqs.py
# Description: Align two DNA sequences from an input file and save best alignment to a text file
# Usage: python align_seqs.py
# Date: Oct 2025

"""This script reads two DNA sequences from an input file, aligns them to find
the highest similarity score, and saves the best alignment and score to a text file."""

__author__ = 'Xiaoqi Wu (xiaoqi.wu22@imperial.ac.uk)'
__version__ = '0.0.2'

import csv
import sys
import os


# =============================
#  Function to calculate score
# =============================
def calculate_score(s1, s2, l1, l2, startpoint):
    """Compute alignment score starting at a given startpoint."""
    matched = ""
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]:
                matched += "*"
                score += 1
            else:
                matched += "-"
    print("Alignment:\n" + matched + "\n" + s1 + "\n" + "." * startpoint + s2 + "\n")
    return score


# =============================
#  Main function
# =============================
def main(argv):
    """Main entry point of the script."""

    # ---- Step 1: Read sequences from input file ----
    input_file = "../data/DNA_seqs.csv"   # <— you can adjust path as needed
    output_file = "../results/best_alignment.txt"

    if not os.path.exists(input_file):
        print(f"Error: input file '{input_file}' not found.")
        sys.exit(1)

    with open(input_file, "r") as f:
        reader = csv.reader(f)
        seqs = [row[0].strip() for row in reader if row]  # read non-empty rows

    if len(seqs) < 2:
        print("Error: The input file must contain at least two sequences (one per line or cell).")
        sys.exit(1)

    seq1, seq2 = seqs[0], seqs[1]

    # ---- Step 2: Assign longer and shorter sequences ----
    l1, l2 = len(seq1), len(seq2)
    if l1 >= l2:
        s1, s2 = seq1, seq2
    else:
        s1, s2 = seq2, seq1
        l1, l2 = l2, l1  # swap lengths

    # ---- Step 3: Align sequences and find best score ----
    my_best_align = None
    my_best_score = -1

    for i in range(l1):
        z = calculate_score(s1, s2, l1, l2, i)
        print("Score for this alignment:", z)
        if z > my_best_score:
            my_best_align = "." * i + s2
            my_best_score = z

    # ---- Step 4: Save the results ----
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    with open(output_file, "w") as f:
        f.write("Best alignment result:\n\n")
        f.write(my_best_align + "\n")
        f.write(s1 + "\n")
        f.write(f"\nBest score: {my_best_score}\n")

    # ---- Step 5: Print summary ----
    print("Best alignment found and saved to:", output_file)
    print("Best score:", my_best_score)
    return 0


if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)


**********

Output (first 500 chars):

**********
Alignment:
-----*****
ATCGCCGGATTACGGG
CAATTCGGAT

Score for this alignment: 5
Alignment:
------*--*
ATCGCCGGATTACGGG
.CAATTCGGAT

Score for this alignment: 2
Alignment:
*---------
ATCGCCGGATTACGGG
..CAATTCGGAT

Score for this alignment: 1
Alignment:
--------*-
ATCGCCGGATTACGGG
...CAATTCGGAT

Score for this alignment: 1
Alignment:
*---------
ATCGCCGGATTACGGG
....CAATTCGGAT

Score for this alignment: 1
Alignment:
*---*-----
ATCGCCGGATTACGGG
.....CAATTCGGAT

Score for this alignment: 2
Alignment:

**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 20
Scripts successful: 16
Scripts with errors: 4
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

