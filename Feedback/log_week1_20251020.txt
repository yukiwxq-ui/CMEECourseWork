======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Yuki Wu

Processing week 1

Your current Git repo size is about 1.86 MiB on disk

Found directories: .git, week1, week2, Feedback
Found files: .gitkeep, .gitignore, README.md, texput.log

Processing week 1: week1

Found 10 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: csvtospace.sh

Contents:

**********
#!/bin/sh
# Author: Xiaoqi Wu; xiaoqi.wu22@imperial.ac.uk
# Script: csvtospace.sh
# Description: Converts comma-separated file to space-separated file
# Usage: bash csvto space.sh <inputfile.csv>
# Date: Oct 2025

# Check number of arguments
if [ $# -ne 1 ]; then
    echo "Error; One argument expected."
    echo "Usage: bash csvtospace.sh <inputfile.csv>"
    excit 1
fi

# Check if file exists
if [ ! -f "$1" ]; then
    echo "Error: File '$1' not found."
    exit 1
fi

# Generate output filename
# Replace .csv with _space.txt if exists, else append _space.txt
BASENAME="$(basename "$1" .csv)"
OUTFILE="${BASENAME}_space.txt"

# Convert commas to spaces
echo "Creating a space-separated version of $1 ..."
cat "$1" | tr -s "," " " > "$OUTFILE"

echo "Done! Output saved as $OUTFILE"
exit 0


**********

Output (first 500 chars):

**********
Error; One argument expected.
Usage: bash csvtospace.sh <inputfile.csv>
Error: File '' not found.

**********
Errors:
**********
csvtospace.sh: line 12: excit: command not found

**********
======================================================================
Script: myscript.sh

Contents:

**********
cd ../code
bash boilerplate.sh
**********

Output (first 500 chars):

**********

This is a shell script! 


**********
No errors.
======================================================================
Script: CompileLaTeX.sh

Contents:

**********
#!/bin/bash
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: CompileLaTeX.sh
# Description: Compiles a LaTeX document and opens the resulting PDF
# Usage: bash CompileLaTeX.sh <filename.tex>
# Date: Oct 2025

# Check if an argument is provided
if [ -z "$1" ]; then
  echo "Usage: bash CompileLaTeX.sh <filename.tex>"
  exit 1
fi

# Extract the filename without extension
FILENAME=$(basename "$1" .tex)

# Compile LaTeX document
pdflatex "$FILENAME.tex"
bibtex "$FILENAME"
pdflatex "$FILENAME.tex"
pdflatex "$FILENAME.tex"

# Open the PDF
evince "$FILENAME.pdf" &

# Cleanup auxiliary files
rm -f *.aux *.log *.bbl *.blg

**********

Output (first 500 chars):

**********
Usage: bash CompileLaTeX.sh <filename.tex>

**********
No errors.
======================================================================
Script: tiff2png.sh

Contents:

**********
#!/bin/bash
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: tiff2png.sh
# Description: Converts all .tif files in the current directory to .png format.
# Usage: bash tiff2png.sh
# Date: Oct 2025

# Old version
# for f in *.tif; 
    # do  
        # echo "Converting $f"; 
        # convert "$f"  "$(basename "$f" .tif).png"; 
    # done

# Check if ImageMagick 'convert' command is available
if ! command -v convert &> /dev/null; then
    echo "Error: ImageMagick is not installed. Please install it using:"
    echo "sudo apt install imagemagick"
    exit 1
fi

# Check if any .tif files exist 
shopt -s nullglob
tif_files=(*.tif)

if [ ${#tif_files[@]} -eq 0 ]; then
    echo "No .tif files found in the current directory."
    exit 1
fi

# Convert each .tif to .png 
for f in "${tif_files[@]}"; do
    echo "Converting $f ..."
    convert "$f" "$(basename "$f" .tif).png"
done

echo "All .tif files have been converted to .png format."
exit 0
**********

Output (first 500 chars):

**********
No .tif files found in the current directory.

**********
No errors.
======================================================================
Script: boilerplate.sh

Contents:

**********
#!/bin/sh
# Author: Your Name your.login@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2019

echo -e "\nThis is a shell script! \n"

#exit
**********

Output (first 500 chars):

**********

This is a shell script! 


**********
No errors.
======================================================================
Script: ConcatenateTwoFiles.sh

Contents:

**********
#!/bin/bash
# Author: Xiaoqi Wu; xiaoqi.wu22@imperial.ac.uk
# Script: ConcatenateTwoFiles.sh
# Description: Concatenates two files and saves into a new one
# Usage: bash ConcatenateTwoFiles.sh <file1> <file2> <outputfile>
# Date: Oct 2025

# Old Version
# cat $1 > $3
# cat $2 >> $3
# echo "Merged File is"
# cat $3

# Check if three arguments are provided
if [ $# -ne 3 ]; then
    echo "Error: Three arguments required."
    echo "Usage: bash ConcatenateTwoFiles.sh <file1> <file2> <outputfile>"
    exit 1
fi

# Check if the input files exist
if [ ! -f "$1" ] || [ ! -f "$2" ]; then
    echo "Error: One or both input files not found."
    exit 1
fi

# Concatenate files
cat "$1" > "$3"
cat "$2" >> "$3"
echo "Merged File saved as $3"
exit 0

# Test setup
# Create two small text files
# echo -e "apple\nbanana" > file1.txt
# echo -e "cherry\ndate" > file2.txt

# Run the script
# bash ConcatenateTwoFiles.sh file1.txt file2.txt merged.txt

# Check the merged file
# cat merged.txt

**********

Output (first 500 chars):

**********
Error: Three arguments required.
Usage: bash ConcatenateTwoFiles.sh <file1> <file2> <outputfile>

**********
No errors.
======================================================================
Script: MyExamplesScript.sh

Contents:

**********
#!/bin/sh
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: MyExampleScript.sh
# Description: An example script
# Usage: path/to/MyExampleScript.sh
# Date: Oct 2025

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo
**********

Output (first 500 chars):

**********
Hello mhasoba
Hello mhasoba


**********
No errors.
======================================================================
Script: tabtocsv.sh

Contents:

**********
#!/bin/sh
# Author: Xiaoqi Wu; xiaoqi.wu22@imperial.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2025

# Old Version:
# echo "Creating a comma delimited version of $1 ..."
# cat $1 | tr -s "\t" "," >> $1.csv
# echo "Done!"
# exit

# Improved Version
# Check if input file is provided
if [ $# -ne 1 ]; then
    echo "Error: One argument expected."
    echo "Usage: bash tabtocsv.sh <inputfile>"
    exit 1
fi

# Check if the input file exists
if [ ! -f "$1" ]; then
    echo "Error: File '$1' not found."
    exit 1
fi

# Generate output filename
OUTFILE="$(basename "$1" .txt).csv"

echo "Creating a comma delimited version of $1 ..."
cat "$1" | tr -s "\t" "," > "$OUTFILE"
echo "Done! File saved as $OUTFILE"
exit 0

# Test setup
# Create a sample tab-delimited file
# echo -e "Name\tAge\tCountry\nAlice\t23\tUK\nBob\t25\tUS" > test_tab.txt

# Run the script
# bash tabtocsv.sh test_tab.txt

# Check the output
# cat test_tab.txt.csv

# Expected output
# Name,Age,Country
# Alice,23,UK
# Bob,25,US

**********

Output (first 500 chars):

**********
Error: One argument expected.
Usage: bash tabtocsv.sh <inputfile>

**********
No errors.
======================================================================
Script: variables.sh

Contents:

**********
#!/bin/sh
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: variables.sh
# Description: Illustrates the use of variables
# Usage: path/to/variables.sh
# Date: Oct 2025

## Illustrates the use of variables 

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first argument is $1"
echo "The second argument is $2"

# Assigned Variables; Explicit declaration:
MY_VAR='some string' 
echo 'the current value of the variable is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assigned Variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM
**********

Output (first 500 chars):

**********
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 
the current value of the variable is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********
Errors:
**********
expr: syntax error: missing argument after ‘+’

**********
======================================================================
Script: CountLines.sh

Contents:

**********
#!/bin/bash
# Author: Xiaoqi Wu, xiaoqi.wu22@imperial.ac.uk
# Script: CountLines.sh
# Description: Counts the number of lines in a text file.
# Usage: bash CountLines.sh <inputfile>
# Date: Oct 2025

# Old Version
# NumLines=`wc -l < $1`
# echo "The file $1 has $NumLines lines"
# echo

# Check if one argument is provided
if [ $# -ne 1 ]; then
    echo "Error: One argument expected."
    echo "Usage: bash CountLines.sh <inputfile>"
    exit 1
fi

# Check if file exists
if [ ! -f "$1" ]; then
    echo "Error: File '$1' not found."
    exit 1
fi

# Count the number of lines
NumLines=$(wc -l < "$1")

echo "The file '$1' has $NumLines lines."
exit 0

# Test setup
# Create a small text file
#echo -e "apple\nbanana\ncherry" > fruits.txt

# Run the script
#bash CountLines.sh fruits.txt

**********

Output (first 500 chars):

**********
Error: One argument expected.
Usage: bash CountLines.sh <inputfile>

**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 19
Scripts successful: 17
Scripts with errors: 2
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

